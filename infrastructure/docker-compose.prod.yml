# lapa-casa-hostel/infrastructure/docker-compose.prod.yml

version: '3.8'

###############################################################################
# NETWORKS
###############################################################################
networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

###############################################################################
# VOLUMES
###############################################################################
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  backup-data:
    driver: local

###############################################################################
# SERVICES
###############################################################################
services:

  ###############################################################################
  # POSTGRESQL DATABASE
  ###############################################################################
  postgres:
    image: postgres:16-alpine
    container_name: lapa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lapa_casa_hostel}
      POSTGRES_USER: ${POSTGRES_USER:-lapa_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=pt_BR.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lapa_admin} -d ${POSTGRES_DB:-lapa_casa_hostel}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=2621kB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ###############################################################################
  # REDIS CACHE
  ###############################################################################
  redis:
    image: redis:7-alpine
    container_name: lapa-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ###############################################################################
  # BACKEND API
  ###############################################################################
  backend:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.prod
      target: backend-production
      args:
        NODE_ENV: production
    container_name: lapa-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://${POSTGRES_USER:-lapa_admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-lapa_casa_hostel}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      MP_ACCESS_TOKEN: ${MP_ACCESS_TOKEN}
      MP_WEBHOOK_SECRET: ${MP_WEBHOOK_SECRET}
      RESEND_API_KEY: ${RESEND_API_KEY}
      GOOGLE_SHEETS_CREDENTIALS: ${GOOGLE_SHEETS_CREDENTIALS}
      GOOGLE_SHEET_ID: ${GOOGLE_SHEET_ID}
      WHATSAPP_API_TOKEN: ${WHATSAPP_API_TOKEN}
      WHATSAPP_PHONE_ID: ${WHATSAPP_PHONE_ID}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://lapacasahostel.com}
      LOG_LEVEL: info
      TZ: America/Sao_Paulo
    ports:
      - "4000:4000"
    networks:
      - backend-network
      - monitoring-network
    volumes:
      - ./logs/backend:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  ###############################################################################
  # FRONTEND NEXT.JS
  ###############################################################################
  frontend:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.prod
      target: frontend-production
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.lapacasahostel.com}
        NEXT_PUBLIC_STRIPE_PUBLIC_KEY: ${NEXT_PUBLIC_STRIPE_PUBLIC_KEY}
        NEXT_PUBLIC_MP_PUBLIC_KEY: ${NEXT_PUBLIC_MP_PUBLIC_KEY}
        NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}
    container_name: lapa-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      TZ: America/Sao_Paulo
    ports:
      - "3000:3000"
    networks:
      - frontend-network
      - backend-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  ###############################################################################
  # NGINX REVERSE PROXY
  ###############################################################################
  nginx:
    image: nginx:alpine
    container_name: lapa-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - frontend-network
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  ###############################################################################
  # PROMETHEUS MONITORING
  ###############################################################################
  prometheus:
    image: prom/prometheus:latest
    container_name: lapa-prometheus
    restart: unless-stopped
    user: root
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver:
