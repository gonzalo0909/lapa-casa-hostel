# lapa-casa-hostel/infrastructure/docker-compose.prod.yml

version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: lapa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-lapacasa}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-lapa_channel_manager}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-lapacasa}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lapa-network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB

  redis:
    image: redis:7-alpine
    container_name: lapa-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lapa-network

  app:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.prod
    container_name: lapa-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER:-lapacasa}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-lapa_channel_manager}
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 3000
      BACKEND_PORT: 4000
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      MP_ACCESS_TOKEN: ${MP_ACCESS_TOKEN}
      MP_PUBLIC_KEY: ${MP_PUBLIC_KEY}
      MP_WEBHOOK_SECRET: ${MP_WEBHOOK_SECRET}
      RESEND_API_KEY: ${RESEND_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM:-reservas@lapacasahostel.com}
      WHATSAPP_API_KEY: ${WHATSAPP_API_KEY}
      WHATSAPP_PHONE_NUMBER: ${WHATSAPP_PHONE_NUMBER}
      GOOGLE_SHEETS_ID: ${GOOGLE_SHEETS_ID}
      GOOGLE_SERVICE_ACCOUNT_KEY: ${GOOGLE_SERVICE_ACCOUNT_KEY}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.lapacasahostel.com}
      NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-https://lapacasahostel.com}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    ports:
      - "3000:3000"
      - "4000:4000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lapa-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: lapa-nginx
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lapa-network

  prometheus:
    image: prom/prometheus:latest
    container_name: lapa-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - lapa-network

  grafana:
    image: grafana/grafana:latest
    container_name: lapa-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    ports:
      - "3001:3000"
    networks:
      - lapa-network

networks:
  lapa-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  app_logs:
  app_uploads:
  nginx_logs:
  prometheus_data:
  grafana_data:

âœ… Archivo 172/180 completado
